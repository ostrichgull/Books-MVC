@model Books.Models.Person

@using (Html.BeginForm("Edit", "Persons", FormMethod.Post, new { typeId = (int)ViewBag.TypeID }))
{
    @Html.AntiForgeryToken()

    <br />

    <div class="form-horizontal table-bordered img-rounded">
        <h4><span class="header-books">Edit Person</span></h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ID)

        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.GenderID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("GenderID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.GenderID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateOfBirth, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateOfBirth, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PersonTypeID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("PersonTypeID", null, string.Empty, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CityID, "", new { @class = "text-danger" })
            </div>
        </div>

        <hr />
        <h4><span class="header-books">Place of Birth</span></h4>
        <hr />

        <div class="form-group">
            @Html.LabelFor(model => model.CityID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CityID", null, string.Empty, htmlAttributes: new { @class = "form-control", @onchange = "GetState('#CityID', '#State', '#Country')" })
                @Html.ValidationMessageFor(model => model.CityID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.City.State.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.City.State.Name, new { htmlAttributes = new { @class = "form-control", @id = "State", @disabled = "disabled" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.City.State.Country.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.City.State.Country.Name, new { htmlAttributes = new { @class = "form-control", @id = "Country", @disabled = "disabled" } })
            </div>
        </div>

        <hr />
        <h4><span class="header-books">Address</span></h4>
        <hr />

        <div class="form-group">
            @Html.LabelFor(model => model.StreetName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StreetName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StreetName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Number, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Number, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Number, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Extension, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Extension, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Extension, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CityAddressID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CityAddressID", null, string.Empty, htmlAttributes: new { @class = "form-control", @onchange = "GetState('#CityAddressID', '#StateAddress', '#CountryAddress')" })
                @Html.ValidationMessageFor(model => model.CityAddressID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CityAddress.State.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CityAddress.State.Name, new { htmlAttributes = new { @class = "form-control", @id = "StateAddress", @disabled = "disabled" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CityAddress.State.Country.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CityAddress.State.Country.Name, new { htmlAttributes = new { @class = "form-control", @id = "CountryAddress", @disabled = "disabled" } })
            </div>
        </div>

        <hr />
        <h4><span class="header-books">Contact Information</span></h4>
        <hr />

        <div class="form-group">
            @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div class="footer-books">
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
                function GetState(cityField, stateField, countryField) {
                    GetStateService('@Url.Action("GetState", "Commons")', cityField, stateField, countryField);
                    }
    </script>

}
